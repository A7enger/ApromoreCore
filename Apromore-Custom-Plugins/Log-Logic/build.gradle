/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://raw.github.com/apromore/ApromoreCore_SupportLibs/master/mvn-repo/')
    }

    maven {
        url = uri('http://repository.springsource.com/maven/bundles/release')
    }

    maven {
        url = uri('http://repository.springsource.com/maven/bundles/external')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'javax.activation:javax.activation-api:1.2.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.xml.bind:com.springsource.javax.xml.bind:2.2.0'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.commons:commons-math3:3.6'
    implementation 'org.apromore:log-osgi:1.1'
    implementation 'org.apromore:eclipse-collections-osgi:1.1'
    implementation 'org.apache.servicemix.bundles:org.apache.servicemix.bundles.joda-time:2.3_1'
    implementation 'javax.activation:javax.activation-api:1.2.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.xml.bind:com.springsource.javax.xml.bind:2.2.0'
    testImplementation 'junit:junit:4.12'
    compileOnly 'org.slf4j:slf4j-api:1.7.5'
}

group = 'org.apromore'
version = '1.0.0'
description = 'Log Processing Logic'
java.sourceCompatibility = JavaVersion.VERSION_1_8

configurations.all {
    exclude(group: 'commons-logging')
    exclude(group: 'org.apache.commons', module: 'com.springsource.org.apache.commons.logging')
    exclude(group: 'aspectj', module: 'aspectj*')
    exclude(group: 'hsqldb', module: 'hsqldb')
    exclude(group: 'org.slf4j', module: '1.5*')
    exclude(group: 'org.springframework', module: '2.*')
    exclude(group: 'org.springframework', module: '3.0.*')
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
